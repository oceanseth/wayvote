name: Deploy to Production

on:
  push:
    branches: [ production ]
  pull_request:
    branches: [ production ]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  deploy-lambda:
    name: Deploy Lambda Functions
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: lambdas/package-lock.json

      - name: Install Lambda dependencies
        run: |
          cd lambdas
          npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Lambda functions
        run: |
          cd lambdas
          npx serverless deploy --config serverless-basic.yml --stage production

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  deploy-cloudfront:
    name: Deploy CloudFront and Route53
    runs-on: ubuntu-latest
    needs: deploy-lambda
    if: github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get API Gateway Rest API ID and S3 Bucket Name
        id: get-resources
        run: |
          API_ID=$(aws cloudformation describe-stacks \
            --stack-name wayvote-api-production \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayRestApi`].OutputValue' \
            --output text)
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name wayvote-api-production \
            --query 'Stacks[0].Outputs[?OutputKey==`WayvoteWebsiteBucketName`].OutputValue' \
            --output text)
          echo "api-id=$API_ID" >> $GITHUB_OUTPUT
          echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "API Gateway Rest API ID: $API_ID"
          echo "S3 Bucket Name: $BUCKET_NAME"

      - name: Deploy CloudFront and Route53
        run: |
          cd lambdas
          aws cloudformation deploy \
            --template-file cloudfront-template.yml \
            --stack-name wayvote-cloudfront-production \
            --parameter-overrides \
              ApiGatewayRestApiId="${{ steps.get-resources.outputs.api-id }}" \
              S3BucketName="${{ steps.get-resources.outputs.bucket-name }}" \
              WayvoteHostedZoneId="Z03190542Q3Q8WQPEER6Q" \
              WeighvoteHostedZoneId="Z06182912S2R0YJ8WXV3U" \
              Stage="production" \
            --capabilities CAPABILITY_IAM

      - name: Get CloudFront Distribution ID
        id: get-distribution-id
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name wayvote-cloudfront-production \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)
          echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "CloudFront Distribution ID: $DISTRIBUTION_ID"

  deploy-frontend:
    name: Deploy Frontend to S3
    runs-on: ubuntu-latest
    needs: [deploy-cloudfront, build-frontend]
    if: github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: lambdas/package-lock.json

      - name: Install Lambda dependencies
        run: |
          cd lambdas
          npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy frontend to S3
        run: |
          cd lambdas
          npx serverless s3sync --config serverless-basic.yml --stage production

      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name wayvote-cloudfront-production \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)
          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"

  test-api:
    name: Test API Endpoints
    runs-on: ubuntu-latest
    needs: deploy-cloudfront
    if: github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 30

      - name: Test API root endpoint
        run: |
          curl -f https://api.wayvote.org/ || exit 1

      - name: Test API helloworld endpoint
        run: |
          response=$(curl -s -X POST https://api.wayvote.org/helloworld \
            -H "Content-Type: application/json" \
            -d '{"test": "data"}')
          echo "$response" | grep -q "hello world" || exit 1

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-lambda, deploy-cloudfront, deploy-frontend, test-api]
    if: always() && github.ref == 'refs/heads/production'
    
    steps:
      - name: Notify success
        if: needs.deploy-lambda.result == 'success' && needs.deploy-cloudfront.result == 'success' && needs.deploy-frontend.result == 'success' && needs.test-api.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Frontend: https://wayvote.org"
          echo "üîó API: https://api.wayvote.org"
          echo "üìä API Test: https://wayvote.org/api-test"

      - name: Notify failure
        if: needs.deploy-lambda.result == 'failure' || needs.deploy-cloudfront.result == 'failure' || needs.deploy-frontend.result == 'failure' || needs.test-api.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details."
          exit 1
